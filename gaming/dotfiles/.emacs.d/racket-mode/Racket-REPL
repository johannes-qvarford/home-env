(find-triplett-product 100)
(find-triplet-product 100)
(find-triplet-product 100)
(find-triplet-product 25)
(find-triplet-product 25)
(triplet? 3 4 5)
(find-triplet-product 1000)

ls
(exit)
5
5
(sum-of-primes-less-than 10)

5
(sum-of-primes-less-than 10)

10
(sum-of-primes-less-than 10)
(sum-of-primes-less-than 10)
(stream-take-while (in-naturals) (lambda (x) (< x 10)))
(stream-take-while (lambda (x) (< x 10)) (in-naturals))
stream-take-while
(stream-take-while)
(stream-take-while (in-naturals) (in-naturals))
(stream-take-while (stream 1) (stream 2))
(stream-take-while 10 (stream 2))
(stream-take-while (in-range 10) (in-range 10))
(stream-take-while empty-stream empty-stream)
(stream? (in-naturals))
(sequence? (in-naturals))
(stream? (sequence->stream (in-naturals)))
(stream-filter prime? (in-naturals))
(stream-first (stream 1))
(stream-first (in-naturals))
10
(divisibles 1)
(divisibles 1)
(divisibles 2)
(divisibles 3)
(divisibles 4)
(divisibles# 12)
(divisbles 12)
(divisibles 12)
(triangle-number 1)
(triangle-number 2)
(triangle-number 3)
stream->list
(stream->list (stream-take 10 (triangle-numbers)))
(stream->list (stream-take (triangle-numbers) 10))
(stream->list (stream-take (triangle-numbers) 10))
(stream-ormap (λ (x) (> x 10) (in-naturals)))

(stream-ormap (λ (x) (> x 10)) (in-naturals))

(stream-ormap (λ (x) (and (> x 10) 'yes)) (in-naturals))


5
5
5
5

5
(stream->list (stream-take (triangle-numbers) 20))
(stream->list (stream-take (triangle-numbers) 20))
10
(divisible-by? 4 2)
(remainder 4 2)
(= (remainder 4 2) 0)
(remainder 4 2)
(divisible-by? 4 2)
exit
(exit)

10
(current-output-port)
(output-port? (current-output-port))
(file-stream-port? (current-output-port))
(subprocess (current-output-port) #f 'stdout "ls")
(subprocess #f #f 'stdout "ls")
(let-values ([(p o i e) (subprocess #f #f 'stdout "/bin/ls")]))
(let-values ([(p o i e) (subprocess #f #f 'stdout "/bin/ls")]))
(let-values ([(p o i e) (subprocess #f #f 'stdout "/bin/ls")]) (read-line o))
(let-values ([(p o i e) (subprocess #f #f 'stdout "/usr/local/bin/youtube-dl")]) (read-line o))
    (with-output-to-string (lambda () (system "date")))
(system "date")
(file-stream-port? (string-output-port))
(file-stream-port? (open-output-string))
(define o (open-output-string))
(copy-port (open-input-port "") o)
(copy-port (open-input-string "") o)
(get-output-string o)
(current-output-port)
is-tty?
is-tty-port?
(terminal-port? (current-output-port))
(format "~a" "yes")
data-directory
data-directory
(subscriptions)
(subscriptions)
(subscriptions)
(subscriptions)
