#!/usr/bin/env python3

import json
import os
import re
import shutil
import sys
import time
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class ConfigHandler(FileSystemEventHandler):
    def __init__(self, reload_callback):
        self.reload_callback = reload_callback
        
    def on_modified(self, event):
        if not event.is_directory and event.src_path.endswith('.sync.json'):
            print("Config file changed, reloading...")
            self.reload_callback()


class SyncHandler(FileSystemEventHandler):
    def __init__(self, config, base_dir):
        self.config = config
        self.base_dir = Path(base_dir)
        self.last_sync = {}
        self.debounce_ms = config.get('debounce_ms', 1000)
        self.verbose = config.get('verbose', False)
        
    def update_config(self, config):
        self.config = config
        self.debounce_ms = config.get('debounce_ms', 1000)
        self.verbose = config.get('verbose', False)

    def should_sync_file(self, file_path, sync_pair):
        file_str = str(file_path)
        
        # Global exclusion: Skip temp files with pattern .temp.digits.digits
        if re.search(r'\.temp\.\d+\.\d+$', file_str):
            return False
        
        include_regex = sync_pair.get('include_regex')
        if include_regex and not re.search(include_regex, file_str):
            return False
            
        exclude_regex = sync_pair.get('exclude_regex')
        if exclude_regex and re.search(exclude_regex, file_str):
            return False
            
        return True

    def get_sync_pairs_for_path(self, file_path):
        matching_pairs = []
        
        for sync_pair in self.config['sync_pairs']:
            # Check if this is a file-to-file sync pair
            if self.is_file_sync_pair(sync_pair):
                file1 = (self.base_dir / sync_pair['file1']).resolve()
                file2 = (self.base_dir / sync_pair['file2']).resolve()
                file_path_resolved = Path(file_path).resolve()
                
                # For one-way sync, only sync from file1 to file2
                if sync_pair.get('one_way', False):
                    if file_path_resolved == file1:
                        matching_pairs.append((sync_pair, file1.parent, file2.parent, Path(file2.name)))
                    # Don't sync from file2 to file1 in one-way mode
                else:
                    # Bidirectional sync (original behavior)
                    if file_path_resolved == file1:
                        matching_pairs.append((sync_pair, file1.parent, file2.parent, Path(file2.name)))
                    elif file_path_resolved == file2:
                        matching_pairs.append((sync_pair, file2.parent, file1.parent, Path(file1.name)))
            else:
                # Original directory-to-directory sync logic
                dir1 = (self.base_dir / sync_pair['dir1']).resolve()
                dir2 = (self.base_dir / sync_pair['dir2']).resolve()
                
                file_path_resolved = Path(file_path).resolve()
                
                # For one-way sync, only sync from dir1 to dir2
                if sync_pair.get('one_way', False):
                    if file_path_resolved.is_relative_to(dir1):
                        matching_pairs.append((sync_pair, dir1, dir2, file_path_resolved.relative_to(dir1)))
                    # Don't sync from dir2 to dir1 in one-way mode
                else:
                    # Bidirectional sync (original behavior)
                    if file_path_resolved.is_relative_to(dir1):
                        matching_pairs.append((sync_pair, dir1, dir2, file_path_resolved.relative_to(dir1)))
                    elif file_path_resolved.is_relative_to(dir2):
                        matching_pairs.append((sync_pair, dir2, dir1, file_path_resolved.relative_to(dir2)))
                
        return matching_pairs

    def get_sync_pair_for_path(self, file_path):
        # Keep backward compatibility - return first match
        pairs = self.get_sync_pairs_for_path(file_path)
        return pairs[0] if pairs else None

    def is_file_sync_pair(self, sync_pair):
        return 'file1' in sync_pair and 'file2' in sync_pair

    def sync_file(self, source_file):
        current_time = time.time() * 1000
        file_key = str(source_file)
        
        if file_key in self.last_sync:
            if current_time - self.last_sync[file_key] < self.debounce_ms:
                return
                
        self.last_sync[file_key] = current_time
        
        sync_infos = self.get_sync_pairs_for_path(source_file)
        if not sync_infos:
            return
            
        for sync_pair, source_dir, target_dir, relative_path in sync_infos:
            if not self.should_sync_file(relative_path, sync_pair):
                if self.verbose:
                    print(f"Skipping {relative_path} (filtered by regex)")
                continue
                
            source_path = source_dir / relative_path
            target_path = target_dir / relative_path
            
            if not source_path.exists():
                if target_path.exists():
                    if self.verbose:
                        print(f"Removing {target_path}")
                    target_path.unlink()
                continue
                
            target_path.parent.mkdir(parents=True, exist_ok=True)
            
            try:
                shutil.copy2(source_path, target_path)
                if self.verbose:
                    print(f"Synced: {source_path} -> {target_path}")
            except Exception as e:
                print(f"Error syncing {source_path} to {target_path}: {e}")

    def on_modified(self, event):
        if not event.is_directory:
            self.sync_file(event.src_path)
            
    def on_created(self, event):
        if not event.is_directory:
            self.sync_file(event.src_path)
            
    def on_deleted(self, event):
        if not event.is_directory:
            self.sync_file(event.src_path)
            
    def on_moved(self, event):
        if not event.is_directory:
            self.sync_file(event.dest_path)


def load_config():
    config_path = Path('.sync.json')
    if not config_path.exists():
        print(f"Error: {config_path} not found in current directory")
        sys.exit(1)
        
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error parsing {config_path}: {e}")
        sys.exit(1)


def validate_config(config):
    if 'sync_pairs' not in config:
        print("Error: 'sync_pairs' not found in config")
        return False
        
    for i, pair in enumerate(config['sync_pairs']):
        # Check if it's a file-to-file sync pair
        if 'file1' in pair and 'file2' in pair:
            file1_path = Path(pair['file1'])
            file2_path = Path(pair['file2'])
            
            # Create parent directories if they don't exist
            file1_path.parent.mkdir(parents=True, exist_ok=True)
            file2_path.parent.mkdir(parents=True, exist_ok=True)
        elif 'dir1' in pair and 'dir2' in pair:
            # Original directory-to-directory validation
            dir1_path = Path(pair['dir1'])
            dir2_path = Path(pair['dir2'])
            
            if not dir1_path.exists():
                print(f"Warning: {dir1_path} does not exist, creating...")
                dir1_path.mkdir(parents=True, exist_ok=True)
                
            if not dir2_path.exists():
                print(f"Warning: {dir2_path} does not exist, creating...")
                dir2_path.mkdir(parents=True, exist_ok=True)
        else:
            print(f"Error: sync_pairs[{i}] must have either ('dir1', 'dir2') or ('file1', 'file2')")
            return False
            
    return True


def initial_sync(config, base_dir):
    base_path = Path(base_dir)
    handler = SyncHandler(config, base_dir)
    
    for sync_pair in config['sync_pairs']:
        if 'file1' in sync_pair and 'file2' in sync_pair:
            file1 = base_path / sync_pair['file1']
            file2 = base_path / sync_pair['file2']
            
            if sync_pair.get('one_way', False):
                # One-way sync: always sync from file1 to file2
                if file1.exists():
                    handler.sync_file(str(file1))
            else:
                # Bidirectional sync: sync the newer file to the older one
                if file1.exists() or file2.exists():
                    if file1.exists() and file2.exists():
                        if file1.stat().st_mtime > file2.stat().st_mtime:
                            handler.sync_file(str(file1))
                        else:
                            handler.sync_file(str(file2))
                    elif file1.exists():
                        handler.sync_file(str(file1))
                    elif file2.exists():
                        handler.sync_file(str(file2))
        else:
            # Directory-to-directory sync
            dir1 = base_path / sync_pair['dir1']
            dir2 = base_path / sync_pair['dir2']
            
            if sync_pair.get('one_way', False):
                # One-way sync: only sync from dir1 to dir2
                if dir1.exists():
                    for file_path in dir1.rglob('*'):
                        if file_path.is_file():
                            handler.sync_file(str(file_path))
            else:
                # Bidirectional sync (original logic)
                for dir_path in [dir1, dir2]:
                    if dir_path.exists():
                        for file_path in dir_path.rglob('*'):
                            if file_path.is_file():
                                handler.sync_file(str(file_path))


def setup_watchers(observer, config, event_handler, base_dir):
    observer.unschedule_all()
    watched_dirs = set()
    
    for sync_pair in config['sync_pairs']:
        if 'file1' in sync_pair and 'file2' in sync_pair:
            file1 = Path(base_dir) / sync_pair['file1']
            file2 = Path(base_dir) / sync_pair['file2']
            
            if sync_pair.get('one_way', False):
                # One-way sync: only watch the source (file1)
                if str(file1.parent) not in watched_dirs:
                    observer.schedule(event_handler, str(file1.parent), recursive=False)
                    watched_dirs.add(str(file1.parent))
                print(f"Watching: {file1} -> {file2} (one-way)")
            else:
                # Bidirectional sync: watch both files
                if str(file1.parent) not in watched_dirs:
                    observer.schedule(event_handler, str(file1.parent), recursive=False)
                    watched_dirs.add(str(file1.parent))
                if str(file2.parent) not in watched_dirs:
                    observer.schedule(event_handler, str(file2.parent), recursive=False)
                    watched_dirs.add(str(file2.parent))
                print(f"Watching: {file1} <-> {file2}")
        else:
            dir1 = Path(base_dir) / sync_pair['dir1']
            dir2 = Path(base_dir) / sync_pair['dir2']
            
            if sync_pair.get('one_way', False):
                # One-way sync: only watch the source (dir1)
                if str(dir1) not in watched_dirs:
                    observer.schedule(event_handler, str(dir1), recursive=True)
                    watched_dirs.add(str(dir1))
                print(f"Watching: {dir1} -> {dir2} (one-way)")
            else:
                # Bidirectional sync: watch both directories
                if str(dir1) not in watched_dirs:
                    observer.schedule(event_handler, str(dir1), recursive=True)
                    watched_dirs.add(str(dir1))
                if str(dir2) not in watched_dirs:
                    observer.schedule(event_handler, str(dir2), recursive=True)
                    watched_dirs.add(str(dir2))
                print(f"Watching: {dir1} <-> {dir2}")


def main():
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print("Usage: sync-dirs")
        print("Watches directories specified in .sync.json and syncs files between them.")
        print("Configuration is read from .sync.json in the current working directory.")
        sys.exit(0)
        
    config = load_config()
    
    if not validate_config(config):
        sys.exit(1)
        
    base_dir = os.getcwd()
    
    print("Performing initial sync...")
    initial_sync(config, base_dir)
    
    event_handler = SyncHandler(config, base_dir)
    observer = Observer()
    
    def reload_config():
        nonlocal config
        try:
            new_config = load_config()
            if validate_config(new_config):
                config = new_config
                event_handler.update_config(config)
                
                # Perform initial sync for any new or changed sync pairs
                print("Performing initial sync after config reload...")
                initial_sync(config, base_dir)
                
                setup_watchers(observer, config, event_handler, base_dir)
                print("Configuration reloaded successfully")
            else:
                print("Invalid configuration, keeping current config")
        except Exception as e:
            print(f"Error reloading config: {e}")
    
    config_handler = ConfigHandler(reload_config)
    observer.schedule(config_handler, base_dir, recursive=False)
    
    setup_watchers(observer, config, event_handler, base_dir)
    observer.start()
    
    try:
        print("File sync started. Press Ctrl+C to stop.")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nStopping file sync...")
        
    observer.join()


if __name__ == "__main__":
    main()