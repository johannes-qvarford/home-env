#!/usr/bin/env python3
from __future__ import annotations

import os
import sys
from typing import NoReturn, Any
import tomllib

PROMPT: str = (
    "**IMPORTANT: You speak in a somewhat tired, monotone and objective tone. "
    "You are focused on solving the problem and challenge potentially false assumptions "
    "and potentially bad solutions, but will go along with it if the user insists.**"
)

CONFIG_PATH: str = os.path.expanduser("~/.config/ai-remote-control/config.toml")
CLAUDE_BIN: str = os.path.expanduser("~/.local/bin/claude")

def read_config() -> dict[str, Any]:
    with open(CONFIG_PATH, "rb") as f:
        return tomllib.load(f)  # type: ignore[name-defined]

def read_use_claude_code_subscription(data: dict[str, Any]) -> bool:
    val = data.get("use_claude_code_subscription", False)
    if isinstance(val, bool):
        return val
    if isinstance(val, str):
        s = val.strip().lower()
        if s in ("1", "true", "yes", "on"):
            return True
        if s in ("0", "false", "no", "off"):
            return False
    return True

def read_model_option(data: dict[str, Any]) -> list[str]:
    val = data.get("claude_code_model", None)
    if val is not None:
        return ["--model", str(val)]
    else:
        return []

def main() -> NoReturn:

    # Prevent ccr code from being called recursively
    if os.environ.get("CCR_RECURSION") is not None:
        argv = [CLAUDE_BIN, *sys.argv[1:]]
        print(argv)
        os.execvp(argv[0], argv)

    config = read_config()
    use_claude_code_subscription: bool = read_use_claude_code_subscription(config)
    model_option = read_model_option(config)

    if not use_claude_code_subscription:
        env = os.environ.copy()
        env["CCR_RECURSION"] = "1"
        argv = ["ccr", "code", "--append-system-prompt", PROMPT, *model_option, *sys.argv[1:]]
        os.execvpe(argv[0], argv, env)
    else:
        argv = [CLAUDE_BIN, "--append-system-prompt", PROMPT, *sys.argv[1:]]
        os.execvpe(argv[0], argv, os.environ)


if __name__ == "__main__":
    main()
